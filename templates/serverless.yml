service: CompanyXServiceName

plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-jest-plugin
  - serverless-offline # serverless-offline needs to be last in the list

package:
  exclude:
    - __tests__/**
    - scripts/**
    - .git/**
    - env.yml

custom:
  stage: ${opt:stage, 'dev'}
  domains:
    prod: ''
    stage: ''
    dev: ''
    local: localhost
  versions-prod: true
  versions-default: false
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'CompanyXServiceName'
    stage: ${self:custom.stage}
    createRoute53Record: true
  serverless-offline:
    resourceRoutes: true
    port: 4000
  jest:
    collectCoverage: true

provider:
  name: aws
  runtime: nodejs12.x
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}"
  stage: ${self:custom.stage}
  environment: ${file(./env.yml):${self:custom.stage}}
  region: ${file(./env.yml):${self:custom.stage}.REGION}
  versionFunctions: ${self:custom.versions-${self:custom.stage}, self:custom.versions-default}
  # uncomment if you want to use ssm as your key storage
  #iamRoleStatements:
  #  - Effect: 'Allow'
  #    Action: 'ssm:GetParameters'
  #    Resource:
  #      - 'Fn::Sub': 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
  #  - Effect: 'Allow'
  #    Action: 'kms:Decrypt'
  #    Resource:
  #      - 'Fn::Sub': 'arn:aws:kms:us-east-1:${AWS::AccountId}:key/<your-kms-key>'

functions:
  yourfunc:
    handler: handlers.yourfunc
    description: Test function for your service
    events:
      - http:
          path: ''
          method: get
          cors:
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Amz-Security-Token
              - X-Amz-User-Agent
